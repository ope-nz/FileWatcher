?AppType=JavaFX
Build1=Default,nz.op.filewatcher
File1=favicon.png
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfilewatcher
Library3=jsql
Library4=jsystemtray
Library5=jfx
Library6=githubapi
Library7=javaobject
Library8=json
NumberOfFiles=1
NumberOfLibraries=8
NumberOfModules=0
Version=9.3
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True
	#AdditionalJar: sqlite-jdbc-3.32.3.2_min
	
	'#VirtualMachineArgs: -DproxySet=true -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=8888 -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8888
	
	'Copy: ide://run?File=%B4X%\Tools\CopyTo\run.bat&Args=C:\Apps\FileWatcher	
	
	#if RELEASE		
		#CustomBuildAction: 2, C:\Apps\B4J\Tools\CompileOnly\compileonly.bat,		
	#end if	
#End Region

Sub Process_Globals
	Private fx As JFX
	
	Dim f As FileWatcher
	
	Dim ignore_ext As List
	Dim ignore_files As List
	Dim ignore_folders As List
	
	Dim api_token As String
	Dim user_or_org_name As String
	
	Dim DB As SQL
	
	Private tray As SystemTray
	Private icon1 As TrayIcon
	Private LogoImage As Image
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	LogoImage = fx.LoadImage(File.DirAssets, "favicon.png")
	
	DB.InitializeSQLite(File.DirApp,"ChangeLog.sqlite",True)
	
	DB.ExecNonQuery($"CREATE TABLE IF NOT EXISTS "Changes" (
	"FileName" TEXT,
	"FileDirectory" TEXT,
	"ChangeType" TEXT,
	"TimeStamp" INTEGER,
	PRIMARY KEY("FileName","FileDirectory")
	);"$)
		
	f.Initialize("fw")
	
	Dim config As String = File.ReadString(File.DirApp,"config.json")
	
	Dim parser As JSONParser
	parser.Initialize(config)
	
	Dim root As Map = parser.NextObject
	ignore_folders = root.Get("ignore_folders")
	ignore_files = root.Get("ignore_files")
	ignore_ext = root.Get("ignore_ext")
	
	Dim github As Map = root.Get("github")
	user_or_org_name = github.Get("user_or_org_name")
	api_token = github.Get("api_token")
	
	Dim watch_folders As List = root.Get("watch_folders")
	
	Log(ignore_ext)
	Log(ignore_folders)
	Log(watch_folders)
	Log(api_token)
	Log(user_or_org_name)	
	
	f.SetWatchList(watch_folders)	
		
	f.StartWatching
	
	tray.Initialize
	Dim MenuItems() As String = Array As String("Push Changes", "-", "Exit")
	icon1.Initialize("icon1", LogoImage, MenuItems)
	icon1.ToolTip = "Changes in queue: " & GetChangeCount
	tray.AddTrayIcon(icon1)
End Sub

' Right click the tray
Sub Icon1_MenuClick (Text As String)
	Select Text
		Case "Push Changes"
			PushChanges
		Case "Exit"
			DB.Close
			ExitApplication
	End Select
End Sub

' File Watcher detected a MODIFY
Sub fw_ModificationDetected(FileName As String, FileDirectory As String)
	#if DEBUG
	Log(FileName)
	Log(FileDirectory)
	#End If
	LogChange(FileName,FileDirectory,"MODIFY")
End Sub

' File Watcher detected a CREATE
Sub fw_CreationDetected(FileName As String, FileDirectory As String)
	#if DEBUG
	Log(FileName)
	Log(FileDirectory)
	#End If
	LogChange(FileName,FileDirectory,"CREATE")
End Sub

' File Watcher detected a DELETE
Sub fw_DeletionDetected(FileName As String, FileDirectory As String)
	#if DEBUG
	Log(FileName)
	Log(FileDirectory)
	#End If
	LogChange(FileName,FileDirectory,"DELETE")
End Sub

' Determine the file extension
Sub GetFileExt(FileName As String) As String
	Dim idx As Int = FileName.LastIndexof(".")	
	If idx = -1 Then Return ""	
	Return(FileName.SubString2(idx, FileName.Length))
End Sub

' Get the number of changes
Sub GetChangeCount() As Int
	Dim result As Int = DB.ExecQuerySingleResult("select count(*) from Changes")	
	Return result
End Sub

' Work out the project name (override takes preference)
Sub GetProjectName(FileDirectory As String) As String
	Dim l As List = File.ListFiles(FileDirectory)
	
	If File.Exists(FileDirectory,"git-repo-name.txt") Then
		Dim projectname As String = File.ReadString(FileDirectory,"git-repo-name.txt")
		Return projectname
	End If
	
	For Each fl As String In l
		If fl.EndsWith(".b4j") Then			
			Return fl.Replace(".b4j","")
		End If
		If fl.EndsWith(".b4a") Then
			Return fl.Replace(".b4a","")
		End If
		If fl.EndsWith(".b4r") Then
			Return fl.Replace(".b4r","")
		End If
		If fl.EndsWith(".b4i") Then
			Return fl.Replace(".b4i","")
		End If
	Next
	
	If FileDirectory.Contains("src") Then
		Dim i1 As Int = FileDirectory.IndexOf("src")		
		Dim projectname As String = FileDirectory.SubString2(0,i1-1)
		
		Dim i2 As Int = projectname.LastIndexOf("\")+1
		
		projectname = projectname.SubString(i2)
		
		Return projectname
	End If	
	
	Return ""
End Sub

' Log the change to the database
Sub LogChange(FileName As String, FileDirectory As String, ChangeType As String) As Boolean
	If ignore_folders.IndexOf(FileName) > -1 Then Return False
	
	If ignore_files.IndexOf(FileName) > -1 Then Return False
	
	If GetFileExt(FileName) = "" Then
		'Its a folder so ignore
		Return False
	End If
	
	If ignore_ext.IndexOf(GetFileExt(FileName)) > -1 Then Return False
	
	#if DEBUG
	Log(ChangeType & ": " & FileDirectory & "\" & FileName)
	#End If	
		
	DB.ExecNonQuery2("REPLACE into Changes (FileName,FileDirectory,ChangeType,TimeStamp) values (?,?,?,?)",Array As Object(FileName,FileDirectory,ChangeType,DateTime.Now))
	
	icon1.ToolTip = "Changes in queue: " & GetChangeCount
	
	Return True
End Sub

' Push changes up to GitHub
Sub PushChanges()
	If GetChangeCount = 0 Then
		Dim jo As JavaObject = icon1
		jo.RunMethod("displayMessage",Array As Object("Success", "No changes to push", "NONE"))
		Return
	End If
	
	Dim Count_new As Int = 0
	Dim Count_upd As Int = 0
	Dim Count_del As Int = 0
	Dim Count_ign As Int = 0
	
	Dim SearchQuery As String
	SearchQuery = "select * from Changes order by FileDirectory,FileName,Timestamp"
		
	Dim Cursor1 As ResultSet
	Cursor1 = DB.ExecQuery(SearchQuery)
	
	Dim hub As githubapi
	hub.Initialize2(api_token)
	
	If hub.isCredentialValid = False Then
		Dim jo As JavaObject = icon1
		jo.RunMethod("displayMessage",Array As Object("Error", "Could not log into GitHub using auth token!", "ERROR"))
		Return 
	End If
	
	Do While Cursor1.NextRow
		Try
			Dim FileName As String = Cursor1.GetString("FileName")
			Dim FileDirectory As String = Cursor1.GetString("FileDirectory")
			Dim ChangeType As String = Cursor1.GetString("ChangeType")
			
			Dim SafeFileName As String = FileName
					
			Dim ProjectName As String = GetProjectName(FileDirectory)
			
			If ProjectName = "" Then
				Log("Failed to determine project name")
				Dim jo As JavaObject = icon1
				jo.RunMethod("displayMessage",Array As Object("Error", $"Could not determine project name for file ${FileName} in ${FileDirectory}"$, "ERROR"))
				Return
			End If
			
			Dim Folder As String = ""
			
			If ProjectName.Contains("/") Then
				Folder = ProjectName.SubString(ProjectName.IndexOf("/")+1)
				ProjectName = ProjectName.SubString2(0,ProjectName.IndexOf("/"))				
				SafeFileName = Folder & "/" & SafeFileName				
			End If
			
			#if DEBUG
			Log("-----------------------")
			Log(FileName)
			Log(SafeFileName)
			Log(ProjectName)
			#End If			
			
			Dim repo As GHRepository
			repo.Initialize

			repo = hub.getRepository(user_or_org_name & "/" & ProjectName)
			
			' If the repo isnt initialised then create it
			If repo.IsInitialized = False Then
				repo = hub.createRepository(ProjectName,"","",False)
			End If
			
			If repo.IsInitialized = True Then									
				'Try and get the file			
				Dim c As GHContent
				c = repo.getFileContent(SafeFileName)
				
				If c.IsInitialized = False Then
					'File doesnt exist
					If ChangeType <> "DELETE" Then
						Log("Creating GITHUB "&FileName)
						If File.Exists(FileDirectory,FileName) = False Then
							Log("File doesnt exist on file system?")
						Else
							'Could be a create or update but file doesnt exist so creating anyway							
							'Dim SafeFileContent As String = $"$xml{File.ReadString(FileDirectory,FileName)}"$							
							Dim SafeFileContent As String = File.ReadString(FileDirectory,FileName)
							repo.createContent(SafeFileContent,"Initial Commit",SafeFileName)
							Count_new = Count_new + 1
						End If
					Else
						'Well file doesnt exist on GitHub so ignoring
						Log("Ignoring delete as file doesnt exist")
						Count_ign = Count_ign + 1
					End If
				Else
					'File exists
					If ChangeType = "DELETE" Then
						Log("Deleting GITHUB "&FileName)
						c.delete("Deleted")
						Count_del = Count_del + 1
					Else
						Log("Updating GITHUB "&FileName)
						If File.Exists(FileDirectory,FileName) = False Then
							Log("File doesnt exist on file system?")
							Count_ign = Count_ign + 1
						Else
							'Dim SafeFileContent As String = $"$xml{File.ReadString(FileDirectory,FileName)}"$							
							Dim SafeFileContent As String = File.ReadString(FileDirectory,FileName)
							c.update(SafeFileContent,"Update")
							Count_upd = Count_upd + 1
						End If
					End If
				End If
			End If
		Catch
			Log("Error occured with file " & FileName)
		End Try
	Loop
	
	Cursor1.Close
	
	DB.ExecNonQuery("delete from Changes")
	
	icon1.ToolTip = "Changes in queue: " & GetChangeCount
	
	Dim jo As JavaObject = icon1
	jo.RunMethod("displayMessage",Array As Object("Success", "Changes pushed successfully" & CRLF & $"New:${Count_new} Updates:${Count_upd} Deleted:${Count_del} Ignored:${Count_ign}"$, "NONE"))
	Return
End Sub